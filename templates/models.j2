from django.db import models
from django.conf import settings
from django.contrib.auth.models import User
from django.db.models.signals import post_save
from django.dispatch import receiver
import uuid
from simple_history.models import HistoricalRecords
{% if splunk %}from .splunk import *
{% endif %}


from django.db import models
from simple_history.models import HistoricalRecords

class AbstractModel(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    #question = models.CharField(max_length=200)
    #pub_date = models.DateTimeField('date published')
    changed_by = models.ForeignKey('auth.User', on_delete=models.PROTECT, editable=False)
    history = HistoricalRecords(inherit=True)

    @property
    def _history_user(self):
        return self.changed_by

    @_history_user.setter
    def _history_user(self, value):
        self.changed_by = value

    class Meta:
        abstract = True

class Author(AbstractModel):
    name = models.CharField("Author", max_length=20)
    #history = HistoricalRecords()

    def __str__(self):
        return self.name

    class Meta:
        ordering = ('id',)


class Book(AbstractModel):
    title = models.CharField("Title",max_length=100)
    author = models.ForeignKey(Author,related_name='books',on_delete=models.CASCADE)
    #history = HistoricalRecords()

    def __str__(self):
        return self.title

    class Meta:
        ordering = ('id',)
{% if splunk %}


@receiver(post_save, sender=HistoricalBook)
def send_to_splunk(sender, **kwargs):
    print(sender)
    # serialized = BookSerializer(sender)
    #for h in sender.history.all():
    #    print(splunkcheck('bookstore', h.history_id))
    # splunklog('bookstore', serialized)
{% endif %}
