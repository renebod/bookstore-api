from rest_framework import serializers
from rest_framework.reverse import reverse
from .models import *


class AbstractSerializer(serializers.ModelSerializer):
    url = serializers.SerializerMethodField(read_only=True)
    created_by = serializers.SerializerMethodField()
    changed_by = serializers.SerializerMethodField()
    history = serializers.SerializerMethodField()

    def get_url(self, obj):
        return reverse(f'{obj._meta.model_name}-detail',kwargs={'pk':obj.pk}, request=self.context['request'])

    def get_created_by(self, obj):
        return obj.history.last().changed_by.username

    def get_changed_by(self, obj):
        return obj.changed_by.username

    def get_history(self, obj):
        return obj.history.all().values()

    def validate(self, data):
        data['changed_by_id'] = self.context['request'].user.id
        return data


class AuthorSerializer(AbstractSerializer):

    class Meta:
        model = Author
        fields = ('url', 'name')


class BookSerializer(AbstractSerializer):

    class Meta:
        model = Book
        fields = ('url', 'title')


class AuthorDetailSerializer(AuthorSerializer):
    books = BookSerializer(many=True)

    class Meta:
        model = Author
        fields = ('url', 'name', 'books', 'created_by', 'history')
        read_only_fields = ['url']
        depth = 1


class AuthorCreateSerializer(AuthorSerializer):

    class Meta:
        model = Author
        fields = ('url', 'name', 'changed_by')


class BookDetailSerializer(BookSerializer):

    class Meta:
        model = Book
        fields = ('url', 'title', 'author', 'created_by', 'history')
        read_only_fields = ['url']
        depth = 1


class BookCreateSerializer(BookSerializer):

    class Meta:
        model = Book
        fields = ('url', 'title', 'author', 'changed_by')
