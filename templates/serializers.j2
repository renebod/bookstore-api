from rest_framework import serializers
from rest_framework.reverse import reverse
from .models import *


def history_cleanup(h):
    h.__dict__['changed_by'] = h.changed_by.username
    h.__dict__['history_date'] = h.history_date.isoformat()
    h.__dict__.pop('changed_by_id', None)
    h.__dict__.pop('history_user_id', None)
    h.__dict__.pop('history_change_reason', None)
    h.__dict__.pop('_state', None)
    return h.__dict__


class AbstractSerializer(serializers.ModelSerializer):
    url = serializers.SerializerMethodField(read_only=True)
    created_by = serializers.SerializerMethodField()
    changed_by = serializers.SerializerMethodField()
    history = serializers.SerializerMethodField()

    def get_url(self, obj):
        return reverse(f'{obj._meta.model_name}-detail',kwargs={'pk':obj.pk}, request=self.context['request'])

    def get_created_by(self, obj):
        return obj.history.last().changed_by.username

    def get_changed_by(self, obj):
        return obj.changed_by.username

    def get_history(self, obj):
        history = []
        for h in obj.history.all():
            h = history_cleanup(h)
            history.append(h)
        return history

    def validate(self, data):
        data['changed_by_id'] = self.context['request'].user.id
        return data


class AuthorSerializer(AbstractSerializer):

    class Meta:
        model = Author
        fields = ('url', 'name')


class BookSerializer(AbstractSerializer):

    class Meta:
        model = Book
        fields = ('url', 'title')


class AuthorDetailSerializer(AbstractSerializer):
    books = BookSerializer(many=True)

    class Meta:
        model = Author
        fields = ('url', 'name', 'books', 'created_by', 'history')
        read_only_fields = ['url', 'created_by', 'history']
        depth = 1


class AuthorCreateSerializer(AbstractSerializer):

    class Meta:
        model = Author
        fields = ('url', 'name', 'changed_by')
        read_only_fields = ['url', 'created_by', 'history']


class BookDetailSerializer(AbstractSerializer):
    author = AuthorSerializer(many=False)

    class Meta:
        model = Book
        fields = ('url', 'title', 'author', 'created_by', 'history')
        read_only_fields = ['url', 'created_by', 'history']
        depth = 1


class BookCreateSerializer(AbstractSerializer):

    class Meta:
        model = Book
        fields = ('url', 'title', 'author', 'changed_by')
        read_only_fields = ['url', 'created_by', 'history']
